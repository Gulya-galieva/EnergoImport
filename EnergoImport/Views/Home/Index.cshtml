@using EnergoImport.Models;
@{
    ViewBag.Title = "Главная";


}

@if ((bool)ViewData["AccessDbCES"])
{
    <div style="width:100%;">
        <a class="btn btn-info"
           style="width:100%; height:100px; font-size:40px; padding-top: 23px; background:#2e4456"
           href="/Home/NetRegions/1">
            ПО ЦЭС
        </a>
    </div>
    <canvas id="chartjs-ces"
            class="chartjs" width="300" height="170"
            style="display: block; width: 392px; height: 196px;"></canvas>
    <br />
}
@if ((bool)ViewData["AccessDbUGES"])
{
    <div style="width:100%;">
        <a class="btn btn-info"
           style="width:100%; height:100px; font-size:40px; padding-top: 23px; background:#2e4456"
           href="/Home/NetRegions/2">
            ПО УГЭС
        </a>
    </div>
    <canvas id="chartjs-uges"
            class="chartjs" width="300" height="170"
            style="display: block; width: 392px; height: 196px;"></canvas>
}

@{
    //Данные для графиков
    var XLabelsCES = Newtonsoft.Json.JsonConvert.SerializeObject(((List<PieceOfPieChartModel>)ViewBag.PieDataListCES).Select(x => x.Name));
    var YValuesCES = Newtonsoft.Json.JsonConvert.SerializeObject(((List<PieceOfPieChartModel>)ViewBag.PieDataListCES).Select(x => x.Value));

    var XLabelsUGES = Newtonsoft.Json.JsonConvert.SerializeObject(((List<PieceOfPieChartModel>)ViewBag.PieDataListUGES).Select(x => x.Name));
    var YValuesUGES = Newtonsoft.Json.JsonConvert.SerializeObject(((List<PieceOfPieChartModel>)ViewBag.PieDataListUGES).Select(x => x.Value));

}
@if ((bool)ViewData["AccessDbCES"])
{
    <script>
        new Chart(document.getElementById("chartjs-ces"),
            {
                "type": "doughnut",
                "data": {
                    "labels": @Html.Raw(XLabelsCES),
                    "datasets": [{
                        "label": "My First Dataset", "data": @Html.Raw(YValuesCES),
                        "backgroundColor":
                            ["rgb(99, 200, 132)",
                                "rgb(54, 162, 235)",
                                "rgb(255, 205, 86)",
                                "rgb(220, 220, 230)",
                                "rgb(245, 245, 248)"]
                    }]
                },
                "options": {
                    "plugins": {
                        "labels": {
                            "render": 'value',
                            "fontSize": 12,
                            
                            "fontColor": '#000',
                            "fontFamily": '"Lucida Console", Monaco, monospace'
                        }
                    }
                }
            });
    </script>
}

@if ((bool)ViewData["AccessDbUGES"])
{
    <script>
        new Chart(document.getElementById("chartjs-uges"),
            {
                "type": "doughnut", "data": {
                    "labels": @Html.Raw(XLabelsUGES),
                    "datasets": [{
                        "label": "My First Dataset", "data": @Html.Raw(YValuesUGES),
                        "backgroundColor":
                            ["rgb(99, 200, 132)",
                                "rgb(54, 162, 235)",
                                "rgb(255, 205, 86)",
                                "rgb(220, 220, 230)",
                                "rgb(245, 245, 248)"]
                    }]
                },
                "options": {
                    "plugins": {
                        "labels": {
                            "render": 'value',
                            "fontSize": 12,
                            
                            "fontColor": '#000',
                            "fontFamily": '"Lucida Console", Monaco, monospace'
                        }
                    }
                }
            });
    </script>
}